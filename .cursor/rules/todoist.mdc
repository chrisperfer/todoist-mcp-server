---
description: run todoist tools
globs: *.*
---
# Tools
All todoist tools are in @tools/todoist.

# General Process to Follow
1. Always check tool documentation (--help) before attempting usage
2. If something is not clear, there is more detailed documentation in README.md
3. Follow recommended approaches unless there's a specific reason not to
4. Use IDs instead of names whenever possible for reliable targeting
5. Leverage Todoist query syntax with the --filter parameter
6. Look for the most direct solution (path of least resistance)
7. If you find a gap in something that you cannot do, notify the user and add it to todoist_gaps.md

# Recommended Approaches

## Finding and Filtering Tasks
- Basic task finding: `node tools/todoist/find.js "p:FLOOBY & @test"`
- Search by text: `node tools/todoist/find.js "search:meeting"`
- Combine filters: `node tools/todoist/find.js "today | tomorrow"`
- Get task IDs for batch operations: `node tools/todoist/find.js "overdue" --ids`
- Get detailed task info: `node tools/todoist/find.js "p:FLOOBY & @test" --json`

## Listing and Filtering
- For basic task listing: `node tools/todoist/list.js tasks`
- For project-specific tasks: `node tools/todoist/list.js tasks --filter "p:Project Name"`
- For detailed project info: `node tools/todoist/list.js projects --projectId <id> --data`
- For project notes only: `node tools/todoist/list.js projects --projectId <id> --info`
- For sections in a project: `node tools/todoist/list.js sections --filter "p:Project Name"`
- For detailed task info: `node tools/todoist/list.js tasks --taskId <id>`

## Task Organization

1. DISCOVERY
   - List project tasks: `list tasks --filter "p:Project Name"`
   - Check existing sections: `list sections --filter "p:Project Name"`
   - Find specific tasks: `find.js "p:Project & search:term"`
   - Analyze tasks for natural groupings

2. SECTION CREATION
   - Create broad, non-overlapping categories
   - Use clear, descriptive section names
   - Add sections one at a time: `section.js add --name "Section Name" --projectId <id>`
   - Verify section creation before proceeding
   - if you feel you need more context, you can get the project notes.

3. TASK MOVEMENT
   - Use batch-move with specific search terms
   - Example: `task.js batch-move --taskIds <ids> --to-section-id <id>`
   - Move most specific/clear tasks first
   - Use find.js for complex filters: `find.js "p:Project & (search:term1 | search:term2)" --ids | xargs task.js batch-move --taskIds --to-section-id <id>`
   - Verify after each batch move
   - Handle remaining tasks individually if needed
   - if you feel you need more context, you can get the project notes.

4. VERIFICATION
   - List all tasks again to verify organization
   - Check for tasks in unexpected sections
   - Ensure no tasks are left unsectioned

## Parent-Child Organization

1. ANALYSIS
   - List all tasks: `list tasks --filter "p:Project Name"`
   - Use find.js for specific patterns: `find.js "p:Project & search:pattern"`
   - Identify natural categories
   - Plan category names with appropriate emojis
   - if you feel you need more context, you can get the project notes.

2. PARENT TASK CREATION
   - Create parent tasks directly in project
   - Use emojis for visual distinction
   - Example: `task.js add --content "üìÅ Category Name" --project <id>`

3. BATCH ORGANIZATION
   - Use find.js to identify related tasks
   - Combine related terms: `find.js "p:Project & (search:term1 | search:term2)" --ids`
   - Move tasks category by category
   - Command: `task.js batch-move --taskIds <ids> --to-parent-id <id>`
   - if you feel you need more context, you can get the project notes.

4. VERIFICATION
   - Check organization after each batch
   - Look for misplaced items
   - Verify parent-child relationships

## Sub-Project Organization

1. ANALYSIS
   - List parent project tasks: `list tasks --filter "p:Project Name"`
   - Use find.js for detailed filtering: `find.js "p:Project & no labels"`
   - Identify natural groupings based on:
     * Task type (e.g., recipes vs restaurants)
     * Task context (e.g., planning vs execution)
     * Task workflow (e.g., research vs implementation)
   - if you feel you need more context, you can get the project notes.
   - Plan category names with emojis

2. SUB-PROJECT CREATION
   - Get parent project info: `list projects --filter "Project Name"`
   - Create sub-projects using parent ID:
     * Command: `project.js add --name "üìÅ Category Name" --parentId <id>`
   - Use meaningful emojis as prefixes
   - Keep names broad enough for future tasks
   - if you feel you need more context, you can get the project notes.

3. TASK MIGRATION
   - Use find.js to identify tasks to move
   - Combine multiple terms with OR:
     * Command: `find.js "p:Project & (search:term1 | search:term2)" --ids | xargs task.js batch-move --taskIds --to-project-id <id>`
   - Move clearly categorized tasks first
   - if you feel you need more context, you can get the project notes.
   - Handle ambiguous tasks individually

4. VERIFICATION
   - Check task distribution
   - Verify proper categorization
   - Confirm metadata preservation
   - Review potential miscategorizations

## Best Practices
- Always use IDs instead of names when possible
- Verify existence of projects/sections before operations
- Use specific search terms to avoid false matches
- Keep consistent naming conventions
- Document uncertain categorizations
- Use --json flag when programmatic access is needed
- if you feel you need more context, you can get the project notes.
- Leverage find.js for complex filtering
- Use the Sync API's enhanced capabilities through the unified list command

## Filter Syntax Guide
- p:ProjectName    Search in project
- search:text      Search for text in task names
- @label          Search by label
- no date         Tasks without dates
- no labels       Tasks without labels
- overdue         Overdue tasks
- today           Due today
- &               Combine filters (AND)
- |               Combine filters (OR)

## Example Category Prefixes
üéØ Goals/Objectives    üìã Planning/Lists
üìù Notes/Documentation üîÑ Recurring/Process
üéì Learning/Study      üõ†Ô∏è Tools/Resources
üìÖ Events/Timeline     üë• People/Teams

When handling tasks labeled with @elaborate:

1. TASK CLASSIFICATION
   - Use `find.js "@elaborate" --json` to find all tasks
   - Classify each task as either:
     a) Research-oriented (needs information gathering)
     b) Action-oriented (needs breaking down into steps)
   - Remove @elaborate and add @elaborated when done

2. FOR RESEARCH TASKS:
   - Create a parent "Research findings:" task
   - Add specific findings as subtasks
   - Include direct links to sources
   - Focus on actionable information
   - Remove @elaborate label once research is complete
   - Add an @elaborated label once done.

3. FOR ACTION-ORIENTED TASKS:
   - Create a parent task with appropriate emoji
   - Break down into 5-7 concrete, actionable subtasks
   - Include specific metrics where possible (time, frequency, etc.)
   - Ensure each subtask is self-contained and clear
   - Remove @elaborate label once broken down
   - Add an @elaborated label once done.

4. BEST PRACTICES:
   - Always maintain task hierarchy (parent/child relationships)
   - Include relevant links and references
   - Use clear numbering for sequential steps
   - Add time estimates where applicable
   - Keep subtasks focused and actionable

TASK LABELING BEST PRACTICES:

1. ANALYSIS PHASE
   - First list all tasks: `find.js "p:Project" --json`
   - Review available labels (especially the goal-related ones)
   - Mentally categorize items before starting to label

2. LABELING EXECUTION
   - Use batch-label with simple, specific search terms
   - Process one category at a time
   - Keep search queries simple and unambiguous
   - Use single terms when possible to avoid syntax issues
   - Format: `task.js batch-update --taskIds <ids> --add-labels "Label ‚òÖ"`

3. VALIDATION
   - After each batch, verify the changes were applied correctly
   - Watch for error messages and adjust queries as needed
   - If a complex search fails, break it down into simpler individual searches

4. COMMON PITFALLS TO AVOID
   - Don't use complex boolean logic in search terms initially
   - Avoid special characters in search terms when possible
   - If using multiple search terms, test one first before combining
   - Watch out for spaces and special characters in label names
   - sanity check yourself with the detail in found items to feel confident you are finding the right stuff; similarly, when saving pay attention to the returned values which should confirm you did what was expected.

5. EFFICIENCY TIPS
   - Start with the most clearly categorizable items
   - Use find.js for precise filtering
   - Process similar items together
   - Keep track of what's been labeled to avoid duplicates