---
description: run todoist tools
globs: *.*
---

# Tools
All todoist tools are in @tools/todoist.

# General Process to Follow
1. Always check tool documentation (--help) before attempting usage
2. If something is not clear, there is more detailed documentation in README.md
3. Follow recommended approaches unless there's a specific reason not to
4. Use IDs instead of names whenever possible for reliable targeting
5. Leverage Todoist query syntax with the --filter parameter
6. Look for the most direct solution (path of least resistance)
7. If you find a gap in something that you cannot do, notify the user and add it to todoist_gaps.md

# Recommended Approaches

## Listing and Filtering
- For basic task listing: `node tools/todoist/list.js tasks`
- For project-specific tasks: `node tools/todoist/list.js tasks --filter "p:Project Name"`
- For detailed project info: `node tools/todoist/list.js projects --projectId <id> --data`
- For project notes only: `node tools/todoist/list.js projects --projectId <id> --info`
- For sections in a project: `node tools/todoist/list.js sections --filter "p:Project Name"`
- For detailed task info: `node tools/todoist/list.js tasks --taskId <id>`

## Task Organization

1. DISCOVERY
   - List project tasks: `list tasks --filter "p:Project Name"`
   - Check existing sections: `list sections --filter "p:Project Name"`
   - Analyze tasks for natural groupings

2. SECTION CREATION
   - Create broad, non-overlapping categories
   - Use clear, descriptive section names
   - Add sections one at a time (add-section.js)
   - Verify section creation before proceeding

3. TASK MOVEMENT
   - Use batch-move with specific search terms
   - Example: `task.js batch-move "p:Project & search:term" --to-section <id>`
   - Move most specific/clear tasks first
   - Use multiple search terms when needed: `"search:term1 | search:term2"`
   - Verify after each batch move
   - Handle remaining tasks individually if needed

4. VERIFICATION
   - List all tasks again to verify organization
   - Check for tasks in unexpected sections
   - Ensure no tasks are left unsectioned

## Parent-Child Organization

1. ANALYSIS
   - List all tasks: `list tasks --filter "p:Project Name"`
   - Identify natural categories
   - Plan category names with appropriate emojis

2. PARENT TASK CREATION
   - Create parent tasks directly in project
   - Use emojis for visual distinction
   - Example: `task.js add "üìÅ Category Name" --project <id>`

3. BATCH ORGANIZATION
   - Use batch-move with specific search terms
   - Combine related terms: `"search:term1 | search:term2"`
   - Move tasks category by category
   - Command: `task.js batch-move "p:Project & (search:term1 | search:term2)" --to-parent <id>`

4. VERIFICATION
   - Check organization after each batch
   - Look for misplaced items
   - Verify parent-child relationships

## Sub-Project Organization

1. ANALYSIS
   - List parent project tasks: `list tasks --filter "p:Project Name"`
   - Identify natural groupings based on:
     * Task type (e.g., recipes vs restaurants)
     * Task context (e.g., planning vs execution)
     * Task workflow (e.g., research vs implementation)
   - Plan category names with emojis

2. SUB-PROJECT CREATION
   - Get parent project info: `list projects --filter "Project Name"`
   - Create sub-projects using parent ID:
     * Command: `add-project.js "üìÅ Category Name" --parentId <id>`
   - Use meaningful emojis as prefixes
   - Keep names broad enough for future tasks

3. TASK MIGRATION
   - Use batch-move with specific search terms
   - Combine multiple terms with OR:
     * Command: `task.js batch-move "p:Project & (search:term1 | search:term2)" --to-project <id>`
   - Move clearly categorized tasks first
   - Handle ambiguous tasks individually

4. VERIFICATION
   - Check task distribution
   - Verify proper categorization
   - Confirm metadata preservation
   - Review potential miscategorizations

## Best Practices
- Always use IDs instead of names when possible
- Verify existence of projects/sections before operations
- Use specific search terms to avoid false matches
- Keep consistent naming conventions
- Document uncertain categorizations
- Use --json flag when programmatic access is needed
- Leverage the Sync API's enhanced capabilities through the unified list command

## Example Category Prefixes
üéØ Goals/Objectives    üìã Planning/Lists
üìù Notes/Documentation üîÑ Recurring/Process
üéì Learning/Study      üõ†Ô∏è Tools/Resources
üìÖ Events/Timeline     üë• People/Teams

When handling tasks labeled with @elaborate:

1. TASK CLASSIFICATION
   - Use `list-tasks.js --filter "@elaborate"` to find all tasks
   - Classify each task as either:
     a) Research-oriented (needs information gathering)
     b) Action-oriented (needs breaking down into steps)

2. FOR RESEARCH TASKS:
   - Create a parent "Research findings:" task
   - Add specific findings as subtasks
   - Include direct links to sources
   - Focus on actionable information
   - Remove @elaborate label once research is complete

3. FOR ACTION-ORIENTED TASKS:
   - Create a parent task with appropriate emoji
   - Break down into 5-7 concrete, actionable subtasks
   - Include specific metrics where possible (time, frequency, etc.)
   - Ensure each subtask is self-contained and clear
   - Remove @elaborate label once broken down

4. BEST PRACTICES:
   - Always maintain task hierarchy (parent/child relationships)
   - Include relevant links and references
   - Use clear numbering for sequential steps
   - Add time estimates where applicable
   - Keep subtasks focused and actionable


TASK LABELING BEST PRACTICES:

1. ANALYSIS PHASE
   - First list all tasks in the target project
   - Review available labels (especially the goal-related ones)
   - Mentally categorize items before starting to label

2. LABELING EXECUTION
   - Use batch-label with simple, specific search terms
   - Process one category at a time
   - Keep search queries simple and unambiguous
   - Use single terms when possible to avoid syntax issues
   - Format: task.js batch-label "p:ProjectName & search:term" --add-labels "Label ‚òÖ"

3. VALIDATION
   - After each batch, verify the changes were applied correctly
   - Watch for error messages and adjust queries as needed
   - If a complex search fails, break it down into simpler individual searches

4. COMMON PITFALLS TO AVOID
   - Don't use complex boolean logic in search terms initially
   - Avoid special characters in search terms when possible
   - If using multiple search terms, test one first before combining
   - Watch out for spaces and special characters in label names

5. EFFICIENCY TIPS
   - Start with the most clearly categorizable items
   - Use the most specific search terms possible
   - Process similar items together
   - Keep track of what's been labeled to avoid duplicates

# Your rule content
all todoist tools are in @tools/todoist, and are node scripts that you can run to query todoist and update todoist.  You have permission to run them. Please use the tools and do not try and go off piste and create something new. If you find a gap in something that you cannot do, notifiy the user and add it to todoist_gaps.md